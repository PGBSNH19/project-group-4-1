@page  "/login"
@using BlazorApp_Frontend.Data
@using BlazorApp_Frontend.Services
@using BlazorApp_Frontend.Shared
@using System.Diagnostics.Eventing.Reader
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject NavigationManager navigationManager
@inject AuthenticationStateProvider  authenticationStateProvider
@inject ILocalStorageService storageService

<div class="flex-container-login">
    <div class="login card">
        <EditForm Model="@loginRequest" class="login-form" OnValidSubmit="@LoginUser">
            <div class="text-center">
                <h3>Logga in</h3>
                <AlertMessage Message="@message" MessageType="@messageType" />
                <DataAnnotationsValidator />
                <ValidationSummary />
            </div>
            <div>
                <InputText placeholder="e-post" class="form-control" @bind-Value="loginRequest.Email" />
                <ValidationMessage For="@(() => loginRequest.Email)" />
            </div>
            <div>
                <InputText type="password" class="form-control" placeholder="lösenord" @bind-Value="loginRequest.Password" />
                <ValidationMessage For="@(() => loginRequest.Password)" />
            </div>
            <div class="text-center">
                <input style="margin-bottom: 10px" type="submit" class="btn btn-outline-primary btn-lg" value="Logga in" />
                <br />
                <a href="/signup">Bli medlem</a>
            </div>
        </EditForm>
    </div>
</div>
@code{
    LoginRequest loginRequest = new LoginRequest();
    bool isBusy = false;
    string message = string.Empty;
    AlertMessageType messageType = AlertMessageType.Error;
    Dictionary<string, string> userInfo = new Dictionary<string, string>();

    public async Task LoginUser()
    {
        isBusy = true;
        var result = await UserService.LoginUserAsync(loginRequest);
        if (result.IsSuccess)
        {
            var userInfo = new BlazorApp_Frontend.Data.LocalUserInfo()
            {
                AccessToken = result.Message,
                Email = result.UserInfo["Email"],
                UserName = result.UserInfo["UserName"],
                Type = result.UserInfo["Type"],
                Id = result.UserInfo[System.Security.Claims.ClaimTypes.NameIdentifier],
            };

            await storageService.SetItemAsync("User", userInfo);
            await authenticationStateProvider.GetAuthenticationStateAsync();

            navigationManager.NavigateTo("/");
        }
        else
        {
            message = "Felaktig epost eller lösenord";
        }

        isBusy = false;
    }

    void GoToRegister()
    {
        navigationManager.NavigateTo("/signup");
    }

}