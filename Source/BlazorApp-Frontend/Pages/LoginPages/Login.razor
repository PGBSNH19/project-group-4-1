@page  "/login"
@using BlazorApp_Frontend.Data
@using Newtonsoft.Json
@using BlazorApp_Frontend.Services
@using System.Security.Claims
@inject NavigationManager NavigationManager

<center>
    <div class="col-8 card">
        <div class="col-12 row">
            <p>&nbsp;</p>
        </div>
        <div class="col-12 row">
            <div class="col-6" style="border-left:thick">
                @*<EditForm Model="@user" OnValidSubmit="@ValidateUser">*@
                    <div>
                        <br /><br /><br /><br /><br />
                    </div>
                    <div>
                        <h3 style="font-weight:bold; color:purple">Nearby-Produce Login</h3>
                    </div>
                    <div>
                        <br />
                    </div>
                    <div class="col-12 row">
                        <input class="form-control col-12" placeholder="email address or username" />
                    </div>
                    <br />
                    <div class="col-12 row">
                        <input type="password" class="form-control col-12" placeholder="password" />
                    </div>
                    <br />
                    <div class="col-12 row">
                        <span class="col-12"></span>
                        <input type="submit" class="form-control col-6 btn btn-primary" value="Login" />
                        <a href="/signup" class="col-3">Sign up</a>
                    </div>*
                    <br />
                    <div class="col-12 row" style="text-align:left; font-weight:bold">
                    </div>
                @*</EditForm>*@
            </div>
        </div>
        <div class="col-12 row">
            <p>&nbsp;</p>
        </div>
    </div>
</center>

@*@code {

    private User user;
    public string LoginMesssage { get; set; }
    ClaimsPrincipal claimsPrincipal;

    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task<bool> ValidateUser()
    {
                var returnedUser = await userService.LoginAsync(user);  //Needs to be re-written or altered once services are in place.

        if (returnedUser.Email != null && returnedUser.Username != null)
        {
            await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(returnedUser);  //Needs to be re-written or altered once services are in place.

            NavigationManager.NavigateTo("/"); // Needs to Navigate to profile pages depending on type when that is in place
        }
        else
        {
            LoginMesssage = "Invalid username or password";
        }

        return await Task.FromResult(true);
    }

}*@