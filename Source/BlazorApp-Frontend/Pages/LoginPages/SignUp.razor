@page  "/signup"
@using BlazorApp_Frontend.Data
@using BlazorApp_Frontend.Services
@inject UserRepository userRepo
@inject NavigationManager NavigationManager
@inject UserService UserService


<div class="flex-container-signup">
    <div class="signup card">
        <EditForm Model="@user" class="signup-form" OnValidSubmit="@RegisterUser">
            <div class="text-center">
                <h3>Registrera ny användare</h3>
                <AlertMessage Message="@LoginMesssage" MessageType="@messageType" />
            </div>

            <div style="margin: 20px; text-align: center; font: bold ">
                <h5>Välj användartyp:</h5>
                <input type="radio" value="@userType.1"  id="@userType" name="@userType" @onchange="buyerSelectionChanged" /> Köpare
                <input type="radio" value="@userType.2"  id="@userType" name="@userType" @onchange="sellerSelectionChanged"/> Säljare
            </div>
            <div>
                <input @bind="user.Username" class="form-control" placeholder="användarnamn" />
            </div>
            <div>
                <input  @bind="user.Email" class="form-control" type="email" placeholder="e-post" />
            </div>
            <div>
                <input type="password" @bind="user.Password" class="form-control" placeholder="lösenord" />
            </div>
            <div>
                <input type="password" @bind="ConfirmPassword" class="form-control" placeholder="upprepa lösenord" />
            </div>
            <div class="text-center">
                <input style="margin-bottom: 10px" type="submit" class="btn btn-outline-primary btn-lg" value="Gå vidare" />
                <br />
                <a href="/login">Redan en användare?</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private User user;
    private string ConfirmPassword;
    public string LoginMesssage { get; set; }
    AlertMessageType messageType = AlertMessageType.Error;
    UserType userType = new UserType();


    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }
    public void buyerSelectionChanged(ChangeEventArgs args)
    {
        user.Type = UserType.Buyer;
    }

    public void sellerSelectionChanged(ChangeEventArgs args)
    {
        user.Type = UserType.Seller;
    }


    private async Task<bool> RegisterUser()
    {
        if (user.Password == ConfirmPassword)
        {
            user.Email= user.Email.ToLower();
            var salt = UserService.GenerateSalt();
            var hashedPassword = UserService.GenerateHash(user.Password, salt);
            user.Salt = salt;
            user.Password = hashedPassword;
            var response = await userRepo.PostUser(user);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                LoginMesssage = "Felaktigt användarnamn eller lösenord";
            }

            return await Task.FromResult(true);
        }
        else
        {
            LoginMesssage = "Lösenordet matchar inte";
        }
        return await Task.FromResult(false);
    }

}