@page  "/signup"
@using BlazorApp_Frontend.Data
@using BlazorApp_Frontend.Services
@inject UserRepository userRepo
@inject NavigationManager NavigationManager
@inject UserService UserService


<div class="flex-container-signup">
    <div class="signup card">
        <EditForm Model="@user" class="signup-form" OnValidSubmit="@RegisterUser">
            <div>
                <h3>Nearby-Produce Register</h3>
            </div>
            <div>
                <input @bind="user.Username" class="form-control" placeholder="username" />
            </div>
            <div>
                <input @bind="user.Email" class="form-control" placeholder="email address" />
            </div>
            <div>
                <input type="password" @bind="user.Password" class="form-control" placeholder="password" />
            </div>
            <div>
                <input type="password" @bind="ConfirmPassword" class="form-control" placeholder="confirm password" />
            </div>
            <div class="text-center">
                <input type="submit" class="btn btn-outline-primary btn-lg" value="Sign up" />
                <br />
                <a href="/login">Already an user?</a>
            </div>
        </EditForm>
    </div>
</div>

@code {

    private User user;
    private string ConfirmPassword;
    public string LoginMesssage { get; set; }

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    private async Task<bool> RegisterUser()
    {
        if (user.Password == ConfirmPassword)
        {

            user.Type = UserType.Buyer;
            var salt = UserService.GenerateSalt();
            var hashedPassword = UserService.GenerateHash(user.Password, salt);
            user.Salt = salt;
            user.Password = hashedPassword;
            var response = await userRepo.PostUser(user);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                LoginMesssage = "Felaktigt användarnamn eller lösenord";
            }

            return await Task.FromResult(true);
        }
        else
        {
            LoginMesssage = "Lösenordet matchar inte";
        }
        return await Task.FromResult(false);
    }

}