@page  "/signup"
@using BlazorApp_Frontend.Data
@using BlazorApp_Frontend.Services
@using System.Diagnostics.Eventing.Reader
@using System.ComponentModel.Design
@inject UserRepository userRepo
@inject NavigationManager NavigationManager
@inject UserService UserService


<div class="flex-container-signup">
    <div class="signup card">
        <EditForm Model="@user" class="signup-form" OnValidSubmit="@RegisterUser" OnInvalidSubmit="@InvalidSubmit">

            <div class="text-center">
                <h3>Registrera ny användare</h3>
                <AlertMessage Message="@LoginMesssage" MessageType="@messageType"/>
            </div>

            <div style="margin: 20px; text-align: center; font: bold">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <h5>Välj användartyp:</h5>
                <Input type="radio" value="@userType.1" id="@userType" name="@userType" @onchange="buyerSelectionChanged"/> Köpare
                <input type="radio" value="@userType.2" id="@userType" name="@userType" @onchange="sellerSelectionChanged"/> Säljare
            </div>
            <div>
                <lable>Användarnamn:</lable>
                <InputText @bind-Value="@user.Username" class="form-control" type="text" />
                <ValidationMessage For="@(() => user.Username)" />
            </div>
            <div>
                <lable>E-post:</lable>
                <InputText @bind-Value="user.Email" class="form-control" type="email" />
                <ValidationMessage For="@(() => user.Email)" />
            </div>
            <div>
                <lable>Lösenord:</lable>
                <InputText @bind-Value="user.Password" class="form-control" type="password"/>
                <ValidationMessage For="@(() => user.Password)"/>
            </div>
            <div>
                <lable>Upprepa lösenord:</lable>
                <InputText type="password" @bind-Value="user.ConfirmPassword" class="form-control" />
                <ValidationMessage For="@(() => user.Password)" />

            </div>
            <div class="text-center">
                <input style="margin-bottom: 10px" type="submit" class="btn btn-outline-primary btn-lg" value="Gå vidare"/>
                <br/>
                <a href="/login">Redan en användare?</a>
            </div>
        </EditForm>
    </div>
</div>

@code {


    private string ConfirmPassword;
    public string LoginMesssage { get; set; }
    AlertMessageType messageType = AlertMessageType.Error;
    UserType userType = new UserType();
    private  bool SelectionType;
    private User user = new User();

    protected override Task OnInitializedAsync()
    {
        user = new User();
        return base.OnInitializedAsync();
    }

    public void buyerSelectionChanged(ChangeEventArgs args)
    {
        user.Type = UserType.Buyer;
        SelectionType = true;
    }

    public void sellerSelectionChanged(ChangeEventArgs args)
    {
        user.Type = UserType.Seller;
        SelectionType = true;
    }


    private async Task<bool> RegisterUser()
    {
        if (!SelectionType)
        {
            LoginMesssage = "Du måste ange en användartyp";
            return await Task.FromResult(false);
        }
        if (!user.Email.Contains("@") || user.Email.Contains(" "))
        {
            LoginMesssage = "ogiltig E-post";
            return await Task.FromResult(false);
        }
        if (user.Username.Contains(" "))
        {
            LoginMesssage = "Ogiltigt användarnamn";
            return await Task.FromResult(false);
        }
        if(user.Password.Contains(" "))
        {
            LoginMesssage = "Lösenord får inte innehålla blanka rader";
            return await Task.FromResult(false);
        }

        if (user.Password == user.ConfirmPassword)
        {
            if (user.Username.Length > 125)
            {
                user.Username = user.Username.Substring(0, 125);
            }

            user.Email= user.Email.ToLower();
            var salt = UserService.GenerateSalt();
            var hashedPassword = UserService.GenerateHash(user.Password, salt);
            user.Salt = salt;
            user.Password = hashedPassword;
            var response = await userRepo.PostUser(user);

            if (response.IsSuccessStatusCode)
            {
                NavigationManager.NavigateTo("/Login");
            }
            else
            {
                LoginMesssage = "Felaktigt användarnamn eller lösenord";
            }

            return await Task.FromResult(true);
        }

        LoginMesssage = "Lösenordet matchar inte";
        return await Task.FromResult(false);

    }
    private async Task<bool> InvalidSubmit()
    {
        return await Task.FromResult(false);
    }
}