@page "/editsellerpageproduct"
@using Microsoft.AspNetCore.WebUtilities
@using BlazorApp_Frontend.Data
@using BlazorApp_Frontend.Services
@inject NavigationManager NavManager
@inject ProductRepository ProductRepository;

<EditForm Model="@product" OnValidSubmit="@ValidateProduct">
    <p>Current count: @id</p>
    <div>
        <h3>Edit seller page</h3>
    </div>
    <div>
        <p>Add file to seller page</p>
        <InputFile OnChange="@OnInputFileChange"></InputFile>
    </div>
    <div>
        <input type="submit" class="btn btn-outline-primary btn-lg" value="Upload" />
    </div>
</EditForm>
@code {

    int id = 0;
    HttpResponseMessage response = new HttpResponseMessage();
    private IList<string> imageDataUrls = new List<string>();
    Product product = new Product();

    protected override async Task OnInitializedAsync()
    {
        var uri = NavManager.ToAbsoluteUri(NavManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("id", out var _id))
        {
            id = Convert.ToInt32(_id);
        }
        product = await ProductRepository.GetProductById(id);
    }

    private async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        var format = "image/png";

        var resizedImageFile = await e.File.RequestImageFileAsync(format, 100, 100);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);
        var imageDataUrl = Convert.ToBase64String(buffer);
        product.Image = imageDataUrl;
    }

    private async Task<HttpResponseMessage> ValidateProduct()
    {
        return response = await ProductRepository.PutProduct(product);
    }
}
