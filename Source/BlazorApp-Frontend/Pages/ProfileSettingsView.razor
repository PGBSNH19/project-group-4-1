@page "/profilesettingsview"
@inject UserRepository userRepo
@inject AuthenticationStateProvider  authenticationStateProvider
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject UserService UserService 
@using Services;

<div class="flex-container-profilesettings">
    <div class="card profilesettings">
        <div>
            <h3>Profil inställningar</h3>
        </div>
        <div>
            <label for="currentUserName">Användarnamn</label>
            <input type="text" class="form-control disabled" id="currentUserName" placeholder="Användarnamn" value=@currentUser.Username disabled>
        </div>
        <div>
            <label for="newUserName">Nytt Användarnamn</label>
            <input type="text" @bind="NewUsername" class="form-control" id="newUserName" placeholder="Användarnamn" required>
        </div>
        <div>
            <label for="currentPassword">Lösenord</label>
            <input type="password" class="form-control" id="currentPassword" placeholder="Lösenord" value="*********" disabled>
        </div>
        <div>
            <label for="newPassword">Nytt Lösenord</label>
            <input type="password" @bind="NewPassword" class="form-control" id="newPassword" placeholder="Nytt lösenord " required>
        </div>
        <div>
            <label for="currentEmail">Mailadress</label>
            <input type="text" class="form-control" id="currentEmail" placeholder="mailadress" value=@currentUser.Email disabled>
        </div>
        <div>
            <label for="newEmail">Ny mailadress</label>
            <input type="text" @bind="NewEmail" class="form-control" id="newEmail" placeholder="Mailadress" required>
        </div>
        <div class="text-center">
            <button class="btn btn-outline-success" @onclick="SaveChanges">Spara ändringar</button>
            <button type="button" class="btn btn-outline-danger" @onclick="DeleteAccount">Ta bort mitt konto</button>
        </div>
    </div>
</div>

@code{
    private User currentUser = new User();
    private User newUser = new User();
    private string NewUsername { get; set; }
    private string NewPassword { get; set; }
    private string NewEmail { get; set; }
    private int currentUserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var userLoggedIn = authState.User;
        var claimsList = userLoggedIn.Claims.ToList();
        currentUserId = Int32.Parse(claimsList[4].Value);
        currentUser = await userRepo.GetUserById(currentUserId);
    }

    public async void SaveChanges()
    {
        currentUser = await userRepo.GetUserById(currentUserId);
        newUser = currentUser;

        if (NewUsername != null)
            newUser.Username = NewUsername;
        if (NewPassword != null)
        {
            var hashedPassword = UserService.GenerateHash(NewPassword, currentUser.Salt);
            newUser.Password = hashedPassword;
        }
        if (NewEmail != null)
            newUser.Email = NewEmail.ToLower();

        if (NewUsername == null && NewPassword == null && NewEmail == null)
        {
            await JSRuntime.InvokeAsync<bool>("confirm", $"Du har inte fyllt i något fält. Var god försök igen.");
            return;
        }

        await userRepo.PutUser(newUser);

        NewUsername = "";
        NewPassword = "";
        NewEmail = "";

        this.StateHasChanged();
    }

    public async void DeleteAccount()
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", $"Är du säker på att du vill ta bort kontot: '{currentUser.Username}'?"))
            return;
        await userRepo.DeleteUser(currentUser);
        await Logout();
        navigationManager.NavigateTo("/");
    }

    async Task Logout()
    {
        var localStateProvider = (LocalAuthenticationStateProvider)authenticationStateProvider;
        await localStateProvider.LogoutAsync();
        navigationManager.NavigateTo("/");
    }
}
